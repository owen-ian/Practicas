use std::collections::BinaryHeap;

fn main() {
    // Creando un max-heap y agregando elementos de arranque
    let mut heap = BinaryHeap::new();
    let initial_elements = vec![5, 1, 3, 12, 8, 6, 10, 7, 4, 2, 9, 11];

    // Inserto los elementos de arranque
    for &elem in &initial_elements {
        heap.push(elem);
    }

    // Imprimo el heap original
    let sorted_original: Vec<_> = heap.clone().into_sorted_vec();
    println!("Heap original (ordenado): {:?}", sorted_original);

    // Elimino el elemento 10 
    let mut temp_vec: Vec<i32> = heap.into_vec();
    if let Some(pos) = temp_vec.iter().position(|&x| x == 10) {
        temp_vec.remove(pos); // Eliminar el elemento específico
    }

    // Creo un nuevo heap con los elementos restantes
    let mut new_heap = BinaryHeap::from(temp_vec);

    // Inserto tres elementos nuevos: 7, 8 y 0 
    let new_elements = vec![7, 8, 0];
    for &elem in &new_elements {
        new_heap.push(elem);
    }

    // Obtengo los elementos y los incrusto en un nuevo heap 
    let heap_structure: Vec<_> = new_heap.clone().into_vec();

    // Imprimo el nuevo heap con su resultado final
    println!("Heap después de eliminar 10 y agregar 7, 8, 0: {:?}", heap_structure);
}

